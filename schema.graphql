# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  lastName: String
  secondLastName: String
  email: String
  password: PasswordState
  phone: String
  role(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoleWhereUniqueInput): [Role!]
  roleCount(where: RoleWhereInput! = {}): Int
  organization: Organization
  client: Project
  quotation(where: QuotationWhereInput! = {}, orderBy: [QuotationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuotationWhereUniqueInput): [Quotation!]
  quotationCount(where: QuotationWhereInput! = {}): Int
  formResponse(where: FormResponseWhereInput! = {}, orderBy: [FormResponseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormResponseWhereUniqueInput): [FormResponse!]
  formResponseCount(where: FormResponseWhereInput! = {}): Int
  assignedTo(where: JobWhereInput! = {}, orderBy: [JobOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JobWhereUniqueInput): [Job!]
  assignedToCount(where: JobWhereInput! = {}): Int
  link: String
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
  link: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  lastName: StringFilter
  secondLastName: StringFilter
  email: StringFilter
  phone: StringFilter
  role: RoleManyRelationFilter
  organization: OrganizationWhereInput
  client: ProjectWhereInput
  quotation: QuotationManyRelationFilter
  formResponse: FormResponseManyRelationFilter
  assignedTo: JobManyRelationFilter
  link: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input RoleManyRelationFilter {
  every: RoleWhereInput
  some: RoleWhereInput
  none: RoleWhereInput
}

input QuotationManyRelationFilter {
  every: QuotationWhereInput
  some: QuotationWhereInput
  none: QuotationWhereInput
}

input FormResponseManyRelationFilter {
  every: FormResponseWhereInput
  some: FormResponseWhereInput
  none: FormResponseWhereInput
}

input JobManyRelationFilter {
  every: JobWhereInput
  some: JobWhereInput
  none: JobWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  lastName: OrderDirection
  secondLastName: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  link: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  lastName: String
  secondLastName: String
  email: String
  password: String
  phone: String
  role: RoleRelateToManyForUpdateInput
  organization: OrganizationRelateToOneForUpdateInput
  client: ProjectRelateToOneForUpdateInput
  quotation: QuotationRelateToManyForUpdateInput
  formResponse: FormResponseRelateToManyForUpdateInput
  assignedTo: JobRelateToManyForUpdateInput
  link: String
  createdAt: DateTime
}

input RoleRelateToManyForUpdateInput {
  disconnect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

input OrganizationRelateToOneForUpdateInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
  disconnect: Boolean
}

input ProjectRelateToOneForUpdateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
}

input QuotationRelateToManyForUpdateInput {
  disconnect: [QuotationWhereUniqueInput!]
  set: [QuotationWhereUniqueInput!]
  create: [QuotationCreateInput!]
  connect: [QuotationWhereUniqueInput!]
}

input FormResponseRelateToManyForUpdateInput {
  disconnect: [FormResponseWhereUniqueInput!]
  set: [FormResponseWhereUniqueInput!]
  create: [FormResponseCreateInput!]
  connect: [FormResponseWhereUniqueInput!]
}

input JobRelateToManyForUpdateInput {
  disconnect: [JobWhereUniqueInput!]
  set: [JobWhereUniqueInput!]
  create: [JobCreateInput!]
  connect: [JobWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  lastName: String
  secondLastName: String
  email: String
  password: String
  phone: String
  role: RoleRelateToManyForCreateInput
  organization: OrganizationRelateToOneForCreateInput
  client: ProjectRelateToOneForCreateInput
  quotation: QuotationRelateToManyForCreateInput
  formResponse: FormResponseRelateToManyForCreateInput
  assignedTo: JobRelateToManyForCreateInput
  link: String
  createdAt: DateTime
}

input RoleRelateToManyForCreateInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

input OrganizationRelateToOneForCreateInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
}

input ProjectRelateToOneForCreateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

input QuotationRelateToManyForCreateInput {
  create: [QuotationCreateInput!]
  connect: [QuotationWhereUniqueInput!]
}

input FormResponseRelateToManyForCreateInput {
  create: [FormResponseCreateInput!]
  connect: [FormResponseWhereUniqueInput!]
}

input JobRelateToManyForCreateInput {
  create: [JobCreateInput!]
  connect: [JobWhereUniqueInput!]
}

type Role {
  id: ID!
  name: String
  user(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  userCount(where: UserWhereInput! = {}): Int
  createdAt: DateTime
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  user: UserManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input RoleUpdateInput {
  name: String
  user: UserRelateToManyForUpdateInput
  createdAt: DateTime
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  user: UserRelateToManyForCreateInput
  createdAt: DateTime
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Organization {
  id: ID!
  name: String
  notes: String
  user(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  userCount(where: UserWhereInput! = {}): Int
  project(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  projectCount(where: ProjectWhereInput! = {}): Int
  form(where: FormWhereInput! = {}, orderBy: [FormOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormWhereUniqueInput): [Form!]
  formCount(where: FormWhereInput! = {}): Int
  logo: ImageFieldOutput
  createdAt: DateTime
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input OrganizationWhereUniqueInput {
  id: ID
}

input OrganizationWhereInput {
  AND: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  NOT: [OrganizationWhereInput!]
  id: IDFilter
  name: StringFilter
  notes: StringFilter
  user: UserManyRelationFilter
  project: ProjectManyRelationFilter
  form: FormManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input ProjectManyRelationFilter {
  every: ProjectWhereInput
  some: ProjectWhereInput
  none: ProjectWhereInput
}

input FormManyRelationFilter {
  every: FormWhereInput
  some: FormWhereInput
  none: FormWhereInput
}

input OrganizationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  notes: OrderDirection
  createdAt: OrderDirection
}

input OrganizationUpdateInput {
  name: String
  notes: String
  user: UserRelateToManyForUpdateInput
  project: ProjectRelateToManyForUpdateInput
  form: FormRelateToManyForUpdateInput
  logo: ImageFieldInput
  createdAt: DateTime
}

input ProjectRelateToManyForUpdateInput {
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input FormRelateToManyForUpdateInput {
  disconnect: [FormWhereUniqueInput!]
  set: [FormWhereUniqueInput!]
  create: [FormCreateInput!]
  connect: [FormWhereUniqueInput!]
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input OrganizationUpdateArgs {
  where: OrganizationWhereUniqueInput!
  data: OrganizationUpdateInput!
}

input OrganizationCreateInput {
  name: String
  notes: String
  user: UserRelateToManyForCreateInput
  project: ProjectRelateToManyForCreateInput
  form: FormRelateToManyForCreateInput
  logo: ImageFieldInput
  createdAt: DateTime
}

input ProjectRelateToManyForCreateInput {
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input FormRelateToManyForCreateInput {
  create: [FormCreateInput!]
  connect: [FormWhereUniqueInput!]
}

type Project {
  id: ID!
  name: String
  type: String
  address: String
  start_date: CalendarDay
  end_date: CalendarDay
  notes: String
  client(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  clientCount(where: UserWhereInput! = {}): Int
  organization: Organization
  quotation(where: QuotationWhereInput! = {}, orderBy: [QuotationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuotationWhereUniqueInput): [Quotation!]
  quotationCount(where: QuotationWhereInput! = {}): Int
  createdAt: DateTime
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  name: StringFilter
  type: StringFilter
  address: StringFilter
  start_date: CalendarDayFilter
  end_date: CalendarDayFilter
  notes: StringFilter
  client: UserManyRelationFilter
  organization: OrganizationWhereInput
  quotation: QuotationManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input CalendarDayFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayFilter
}

input ProjectOrderByInput {
  id: OrderDirection
  name: OrderDirection
  type: OrderDirection
  address: OrderDirection
  start_date: OrderDirection
  end_date: OrderDirection
  notes: OrderDirection
  createdAt: OrderDirection
}

input ProjectUpdateInput {
  name: String
  type: String
  address: String
  start_date: CalendarDay
  end_date: CalendarDay
  notes: String
  client: UserRelateToManyForUpdateInput
  organization: OrganizationRelateToOneForUpdateInput
  quotation: QuotationRelateToManyForUpdateInput
  createdAt: DateTime
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  name: String
  type: String
  address: String
  start_date: CalendarDay
  end_date: CalendarDay
  notes: String
  client: UserRelateToManyForCreateInput
  organization: OrganizationRelateToOneForCreateInput
  quotation: QuotationRelateToManyForCreateInput
  createdAt: DateTime
}

type Quotation {
  id: ID!
  name: String
  status: String
  sale_comission: String
  notes: String
  user: User
  project: Project
  quotationProduct(where: QuotationProductWhereInput! = {}, orderBy: [QuotationProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuotationProductWhereUniqueInput): [QuotationProduct!]
  quotationProductCount(where: QuotationProductWhereInput! = {}): Int
  job: Job
  createdAt: DateTime
}

input QuotationWhereUniqueInput {
  id: ID
}

input QuotationWhereInput {
  AND: [QuotationWhereInput!]
  OR: [QuotationWhereInput!]
  NOT: [QuotationWhereInput!]
  id: IDFilter
  name: StringFilter
  status: StringNullableFilter
  sale_comission: StringFilter
  notes: StringFilter
  user: UserWhereInput
  project: ProjectWhereInput
  quotationProduct: QuotationProductManyRelationFilter
  job: JobWhereInput
  createdAt: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input QuotationProductManyRelationFilter {
  every: QuotationProductWhereInput
  some: QuotationProductWhereInput
  none: QuotationProductWhereInput
}

input QuotationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  status: OrderDirection
  sale_comission: OrderDirection
  notes: OrderDirection
  createdAt: OrderDirection
}

input QuotationUpdateInput {
  name: String
  status: String
  sale_comission: String
  notes: String
  user: UserRelateToOneForUpdateInput
  project: ProjectRelateToOneForUpdateInput
  quotationProduct: QuotationProductRelateToManyForUpdateInput
  job: JobRelateToOneForUpdateInput
  createdAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input QuotationProductRelateToManyForUpdateInput {
  disconnect: [QuotationProductWhereUniqueInput!]
  set: [QuotationProductWhereUniqueInput!]
  create: [QuotationProductCreateInput!]
  connect: [QuotationProductWhereUniqueInput!]
}

input JobRelateToOneForUpdateInput {
  create: JobCreateInput
  connect: JobWhereUniqueInput
  disconnect: Boolean
}

input QuotationUpdateArgs {
  where: QuotationWhereUniqueInput!
  data: QuotationUpdateInput!
}

input QuotationCreateInput {
  name: String
  status: String
  sale_comission: String
  notes: String
  user: UserRelateToOneForCreateInput
  project: ProjectRelateToOneForCreateInput
  quotationProduct: QuotationProductRelateToManyForCreateInput
  job: JobRelateToOneForCreateInput
  createdAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input QuotationProductRelateToManyForCreateInput {
  create: [QuotationProductCreateInput!]
  connect: [QuotationProductWhereUniqueInput!]
}

input JobRelateToOneForCreateInput {
  create: JobCreateInput
  connect: JobWhereUniqueInput
}

type QuotationProduct {
  id: ID!
  quantity: Int
  discount: Decimal
  notes: String
  quotation: Quotation
  product: Product
  createdAt: DateTime
}

scalar Decimal

input QuotationProductWhereUniqueInput {
  id: ID
}

input QuotationProductWhereInput {
  AND: [QuotationProductWhereInput!]
  OR: [QuotationProductWhereInput!]
  NOT: [QuotationProductWhereInput!]
  id: IDFilter
  quantity: IntFilter
  discount: DecimalNullableFilter
  notes: StringFilter
  quotation: QuotationWhereInput
  product: ProductWhereInput
  createdAt: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input DecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalNullableFilter
}

input QuotationProductOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
  discount: OrderDirection
  notes: OrderDirection
  createdAt: OrderDirection
}

input QuotationProductUpdateInput {
  quantity: Int
  discount: Decimal
  notes: String
  quotation: QuotationRelateToOneForUpdateInput
  product: ProductRelateToOneForUpdateInput
  createdAt: DateTime
}

input QuotationRelateToOneForUpdateInput {
  create: QuotationCreateInput
  connect: QuotationWhereUniqueInput
  disconnect: Boolean
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input QuotationProductUpdateArgs {
  where: QuotationProductWhereUniqueInput!
  data: QuotationProductUpdateInput!
}

input QuotationProductCreateInput {
  quantity: Int
  discount: Decimal
  notes: String
  quotation: QuotationRelateToOneForCreateInput
  product: ProductRelateToOneForCreateInput
  createdAt: DateTime
}

input QuotationRelateToOneForCreateInput {
  create: QuotationCreateInput
  connect: QuotationWhereUniqueInput
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type Product {
  id: ID!
  name: String
  price: Decimal
  notes: String
  quotationProduct(where: QuotationProductWhereInput! = {}, orderBy: [QuotationProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuotationProductWhereUniqueInput): [QuotationProduct!]
  quotationProductCount(where: QuotationProductWhereInput! = {}): Int
  createdAt: DateTime
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  price: DecimalNullableFilter
  notes: StringFilter
  quotationProduct: QuotationProductManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  price: OrderDirection
  notes: OrderDirection
  createdAt: OrderDirection
}

input ProductUpdateInput {
  name: String
  price: Decimal
  notes: String
  quotationProduct: QuotationProductRelateToManyForUpdateInput
  createdAt: DateTime
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  price: Decimal
  notes: String
  quotationProduct: QuotationProductRelateToManyForCreateInput
  createdAt: DateTime
}

type Job {
  id: ID!
  description: String
  status: String
  notes: String
  scheduled_at: CalendarDay
  completed_at: CalendarDay
  assigned_to: User
  quotation: Quotation
  form(where: FormWhereInput! = {}, orderBy: [FormOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormWhereUniqueInput): [Form!]
  formCount(where: FormWhereInput! = {}): Int
  formResponse(where: FormResponseWhereInput! = {}, orderBy: [FormResponseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormResponseWhereUniqueInput): [FormResponse!]
  formResponseCount(where: FormResponseWhereInput! = {}): Int
  createdAt: DateTime
}

input JobWhereUniqueInput {
  id: ID
}

input JobWhereInput {
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
  id: IDFilter
  description: StringFilter
  status: StringFilter
  notes: StringFilter
  scheduled_at: CalendarDayFilter
  completed_at: CalendarDayFilter
  assigned_to: UserWhereInput
  quotation: QuotationWhereInput
  form: FormManyRelationFilter
  formResponse: FormResponseManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input JobOrderByInput {
  id: OrderDirection
  description: OrderDirection
  status: OrderDirection
  notes: OrderDirection
  scheduled_at: OrderDirection
  completed_at: OrderDirection
  createdAt: OrderDirection
}

input JobUpdateInput {
  description: String
  status: String
  notes: String
  scheduled_at: CalendarDay
  completed_at: CalendarDay
  assigned_to: UserRelateToOneForUpdateInput
  quotation: QuotationRelateToOneForUpdateInput
  form: FormRelateToManyForUpdateInput
  formResponse: FormResponseRelateToManyForUpdateInput
  createdAt: DateTime
}

input JobUpdateArgs {
  where: JobWhereUniqueInput!
  data: JobUpdateInput!
}

input JobCreateInput {
  description: String
  status: String
  notes: String
  scheduled_at: CalendarDay
  completed_at: CalendarDay
  assigned_to: UserRelateToOneForCreateInput
  quotation: QuotationRelateToOneForCreateInput
  form: FormRelateToManyForCreateInput
  formResponse: FormResponseRelateToManyForCreateInput
  createdAt: DateTime
}

type Form {
  id: ID!
  name: String
  description: String
  notes: String
  organization: Organization
  job(where: JobWhereInput! = {}, orderBy: [JobOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JobWhereUniqueInput): [Job!]
  jobCount(where: JobWhereInput! = {}): Int
  question(where: QuestionWhereInput! = {}, orderBy: [QuestionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionWhereUniqueInput): [Question!]
  questionCount(where: QuestionWhereInput! = {}): Int
  formResponse(where: FormResponseWhereInput! = {}, orderBy: [FormResponseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormResponseWhereUniqueInput): [FormResponse!]
  formResponseCount(where: FormResponseWhereInput! = {}): Int
  createdAt: DateTime
}

input FormWhereUniqueInput {
  id: ID
}

input FormWhereInput {
  AND: [FormWhereInput!]
  OR: [FormWhereInput!]
  NOT: [FormWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  notes: StringFilter
  organization: OrganizationWhereInput
  job: JobManyRelationFilter
  question: QuestionManyRelationFilter
  formResponse: FormResponseManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input QuestionManyRelationFilter {
  every: QuestionWhereInput
  some: QuestionWhereInput
  none: QuestionWhereInput
}

input FormOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  notes: OrderDirection
  createdAt: OrderDirection
}

input FormUpdateInput {
  name: String
  description: String
  notes: String
  organization: OrganizationRelateToOneForUpdateInput
  job: JobRelateToManyForUpdateInput
  question: QuestionRelateToManyForUpdateInput
  formResponse: FormResponseRelateToManyForUpdateInput
  createdAt: DateTime
}

input QuestionRelateToManyForUpdateInput {
  disconnect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
}

input FormUpdateArgs {
  where: FormWhereUniqueInput!
  data: FormUpdateInput!
}

input FormCreateInput {
  name: String
  description: String
  notes: String
  organization: OrganizationRelateToOneForCreateInput
  job: JobRelateToManyForCreateInput
  question: QuestionRelateToManyForCreateInput
  formResponse: FormResponseRelateToManyForCreateInput
  createdAt: DateTime
}

input QuestionRelateToManyForCreateInput {
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
}

type Question {
  id: ID!
  question: String
  description: String
  type: String
  index: Int
  form: Form
  answer(where: AnswerWhereInput! = {}, orderBy: [AnswerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnswerWhereUniqueInput): [Answer!]
  answerCount(where: AnswerWhereInput! = {}): Int
  createdAt: DateTime
}

input QuestionWhereUniqueInput {
  id: ID
}

input QuestionWhereInput {
  AND: [QuestionWhereInput!]
  OR: [QuestionWhereInput!]
  NOT: [QuestionWhereInput!]
  id: IDFilter
  question: StringFilter
  description: StringFilter
  type: StringFilter
  index: IntNullableFilter
  form: FormWhereInput
  answer: AnswerManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input AnswerManyRelationFilter {
  every: AnswerWhereInput
  some: AnswerWhereInput
  none: AnswerWhereInput
}

input QuestionOrderByInput {
  id: OrderDirection
  question: OrderDirection
  description: OrderDirection
  type: OrderDirection
  index: OrderDirection
  createdAt: OrderDirection
}

input QuestionUpdateInput {
  question: String
  description: String
  type: String
  index: Int
  form: FormRelateToOneForUpdateInput
  answer: AnswerRelateToManyForUpdateInput
  createdAt: DateTime
}

input FormRelateToOneForUpdateInput {
  create: FormCreateInput
  connect: FormWhereUniqueInput
  disconnect: Boolean
}

input AnswerRelateToManyForUpdateInput {
  disconnect: [AnswerWhereUniqueInput!]
  set: [AnswerWhereUniqueInput!]
  create: [AnswerCreateInput!]
  connect: [AnswerWhereUniqueInput!]
}

input QuestionUpdateArgs {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateInput!
}

input QuestionCreateInput {
  question: String
  description: String
  type: String
  index: Int
  form: FormRelateToOneForCreateInput
  answer: AnswerRelateToManyForCreateInput
  createdAt: DateTime
}

input FormRelateToOneForCreateInput {
  create: FormCreateInput
  connect: FormWhereUniqueInput
}

input AnswerRelateToManyForCreateInput {
  create: [AnswerCreateInput!]
  connect: [AnswerWhereUniqueInput!]
}

type Answer {
  id: ID!
  answer: String
  description: String
  question: Question
  createdAt: DateTime
}

input AnswerWhereUniqueInput {
  id: ID
}

input AnswerWhereInput {
  AND: [AnswerWhereInput!]
  OR: [AnswerWhereInput!]
  NOT: [AnswerWhereInput!]
  id: IDFilter
  answer: StringFilter
  description: StringFilter
  question: QuestionWhereInput
  createdAt: DateTimeNullableFilter
}

input AnswerOrderByInput {
  id: OrderDirection
  answer: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
}

input AnswerUpdateInput {
  answer: String
  description: String
  question: QuestionRelateToOneForUpdateInput
  createdAt: DateTime
}

input QuestionRelateToOneForUpdateInput {
  create: QuestionCreateInput
  connect: QuestionWhereUniqueInput
  disconnect: Boolean
}

input AnswerUpdateArgs {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateInput!
}

input AnswerCreateInput {
  answer: String
  description: String
  question: QuestionRelateToOneForCreateInput
  createdAt: DateTime
}

input QuestionRelateToOneForCreateInput {
  create: QuestionCreateInput
  connect: QuestionWhereUniqueInput
}

type FormResponse {
  id: ID!
  user: User
  form: Form
  job: Job
  started_at: CalendarDay
  completed_at: CalendarDay
  createdAt: DateTime
}

input FormResponseWhereUniqueInput {
  id: ID
}

input FormResponseWhereInput {
  AND: [FormResponseWhereInput!]
  OR: [FormResponseWhereInput!]
  NOT: [FormResponseWhereInput!]
  id: IDFilter
  user: UserWhereInput
  form: FormWhereInput
  job: JobWhereInput
  started_at: CalendarDayFilter
  completed_at: CalendarDayFilter
  createdAt: DateTimeNullableFilter
}

input FormResponseOrderByInput {
  id: OrderDirection
  started_at: OrderDirection
  completed_at: OrderDirection
  createdAt: OrderDirection
}

input FormResponseUpdateInput {
  user: UserRelateToOneForUpdateInput
  form: FormRelateToOneForUpdateInput
  job: JobRelateToOneForUpdateInput
  started_at: CalendarDay
  completed_at: CalendarDay
  createdAt: DateTime
}

input FormResponseUpdateArgs {
  where: FormResponseWhereUniqueInput!
  data: FormResponseUpdateInput!
}

input FormResponseCreateInput {
  user: UserRelateToOneForCreateInput
  form: FormRelateToOneForCreateInput
  job: JobRelateToOneForCreateInput
  started_at: CalendarDay
  completed_at: CalendarDay
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createOrganization(data: OrganizationCreateInput!): Organization
  createOrganizations(data: [OrganizationCreateInput!]!): [Organization]
  updateOrganization(where: OrganizationWhereUniqueInput!, data: OrganizationUpdateInput!): Organization
  updateOrganizations(data: [OrganizationUpdateArgs!]!): [Organization]
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteOrganizations(where: [OrganizationWhereUniqueInput!]!): [Organization]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(where: ProjectWhereUniqueInput!, data: ProjectUpdateInput!): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createQuotation(data: QuotationCreateInput!): Quotation
  createQuotations(data: [QuotationCreateInput!]!): [Quotation]
  updateQuotation(where: QuotationWhereUniqueInput!, data: QuotationUpdateInput!): Quotation
  updateQuotations(data: [QuotationUpdateArgs!]!): [Quotation]
  deleteQuotation(where: QuotationWhereUniqueInput!): Quotation
  deleteQuotations(where: [QuotationWhereUniqueInput!]!): [Quotation]
  createQuotationProduct(data: QuotationProductCreateInput!): QuotationProduct
  createQuotationProducts(data: [QuotationProductCreateInput!]!): [QuotationProduct]
  updateQuotationProduct(where: QuotationProductWhereUniqueInput!, data: QuotationProductUpdateInput!): QuotationProduct
  updateQuotationProducts(data: [QuotationProductUpdateArgs!]!): [QuotationProduct]
  deleteQuotationProduct(where: QuotationProductWhereUniqueInput!): QuotationProduct
  deleteQuotationProducts(where: [QuotationProductWhereUniqueInput!]!): [QuotationProduct]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(where: ProductWhereUniqueInput!, data: ProductUpdateInput!): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createJob(data: JobCreateInput!): Job
  createJobs(data: [JobCreateInput!]!): [Job]
  updateJob(where: JobWhereUniqueInput!, data: JobUpdateInput!): Job
  updateJobs(data: [JobUpdateArgs!]!): [Job]
  deleteJob(where: JobWhereUniqueInput!): Job
  deleteJobs(where: [JobWhereUniqueInput!]!): [Job]
  createForm(data: FormCreateInput!): Form
  createForms(data: [FormCreateInput!]!): [Form]
  updateForm(where: FormWhereUniqueInput!, data: FormUpdateInput!): Form
  updateForms(data: [FormUpdateArgs!]!): [Form]
  deleteForm(where: FormWhereUniqueInput!): Form
  deleteForms(where: [FormWhereUniqueInput!]!): [Form]
  createQuestion(data: QuestionCreateInput!): Question
  createQuestions(data: [QuestionCreateInput!]!): [Question]
  updateQuestion(where: QuestionWhereUniqueInput!, data: QuestionUpdateInput!): Question
  updateQuestions(data: [QuestionUpdateArgs!]!): [Question]
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteQuestions(where: [QuestionWhereUniqueInput!]!): [Question]
  createAnswer(data: AnswerCreateInput!): Answer
  createAnswers(data: [AnswerCreateInput!]!): [Answer]
  updateAnswer(where: AnswerWhereUniqueInput!, data: AnswerUpdateInput!): Answer
  updateAnswers(data: [AnswerUpdateArgs!]!): [Answer]
  deleteAnswer(where: AnswerWhereUniqueInput!): Answer
  deleteAnswers(where: [AnswerWhereUniqueInput!]!): [Answer]
  createFormResponse(data: FormResponseCreateInput!): FormResponse
  createFormResponses(data: [FormResponseCreateInput!]!): [FormResponse]
  updateFormResponse(where: FormResponseWhereUniqueInput!, data: FormResponseUpdateInput!): FormResponse
  updateFormResponses(data: [FormResponseUpdateArgs!]!): [FormResponse]
  deleteFormResponse(where: FormResponseWhereUniqueInput!): FormResponse
  deleteFormResponses(where: [FormResponseWhereUniqueInput!]!): [FormResponse]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: RoleRelateToManyForCreateInput
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  role(where: RoleWhereUniqueInput!): Role
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoleWhereUniqueInput): [Role!]
  rolesCount(where: RoleWhereInput! = {}): Int
  organization(where: OrganizationWhereUniqueInput!): Organization
  organizations(where: OrganizationWhereInput! = {}, orderBy: [OrganizationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrganizationWhereUniqueInput): [Organization!]
  organizationsCount(where: OrganizationWhereInput! = {}): Int
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  quotation(where: QuotationWhereUniqueInput!): Quotation
  quotations(where: QuotationWhereInput! = {}, orderBy: [QuotationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuotationWhereUniqueInput): [Quotation!]
  quotationsCount(where: QuotationWhereInput! = {}): Int
  quotationProduct(where: QuotationProductWhereUniqueInput!): QuotationProduct
  quotationProducts(where: QuotationProductWhereInput! = {}, orderBy: [QuotationProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuotationProductWhereUniqueInput): [QuotationProduct!]
  quotationProductsCount(where: QuotationProductWhereInput! = {}): Int
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  job(where: JobWhereUniqueInput!): Job
  jobs(where: JobWhereInput! = {}, orderBy: [JobOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JobWhereUniqueInput): [Job!]
  jobsCount(where: JobWhereInput! = {}): Int
  form(where: FormWhereUniqueInput!): Form
  forms(where: FormWhereInput! = {}, orderBy: [FormOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormWhereUniqueInput): [Form!]
  formsCount(where: FormWhereInput! = {}): Int
  question(where: QuestionWhereUniqueInput!): Question
  questions(where: QuestionWhereInput! = {}, orderBy: [QuestionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionWhereUniqueInput): [Question!]
  questionsCount(where: QuestionWhereInput! = {}): Int
  answer(where: AnswerWhereUniqueInput!): Answer
  answers(where: AnswerWhereInput! = {}, orderBy: [AnswerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnswerWhereUniqueInput): [Answer!]
  answersCount(where: AnswerWhereInput! = {}): Int
  formResponse(where: FormResponseWhereUniqueInput!): FormResponse
  formResponses(where: FormResponseWhereInput! = {}, orderBy: [FormResponseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormResponseWhereUniqueInput): [FormResponse!]
  formResponsesCount(where: FormResponseWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
